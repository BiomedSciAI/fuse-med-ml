def transform_CNN_imaging_predictions_into_MG_examination_predictions(file_path_train = 'example_MG_data_CNN_output_predictions_train.csv',
                                                            file_path_validation = 'example_MG_data_CNN_output_predictions_validation.csv'):
    
    '''Uses the output files generated by the CNN with the image-level predictions and transforms them
    into examination-level predictions. The probabilities per exam consist of an average of probabilities
    per side (left or right) and per viewpoint (CC or MLO). 
    
    Args: 
    
    file_path_train (str): path to the csv file generated by the CNN model with training set predictions.
    file_path_validation (str): path to the csv file generated by the CNN model with validation set predictions.
    
    Returns (pd.DataFrame): data indexed according to Study ID containing predictions per class'''
    
    # Load predictions in both sets
    predictions_train = pd.read_csv(file_path_train, index_col='patient_id')
    
    predictions_val = pd.read_csv(file_path_validation, index_col='patient_id')
    
    # Concatenate dataframes
    predictions_develop_set = pd.concat([predictions_train, predictions_val])

    # create df with mean grouped by study_id, viewpoint, side, for all individuals in development set
    df_all = predictions_develop_set.groupby(['study_id',  'viewpoint', 'side']).mean()
    df_all = df_all.unstack().unstack()
    df_all.columns = ['_'.join(c) for c in df_all.columns.values]
    df_all.reset_index(inplace=True)
    
    # create df with mean grouped by study_id, viewpoint, side. These values will be used to fill missing values
    df_mean_all = predictions_develop_set.groupby(['viewpoint', 'side']).mean()
    df_mean_all = df_mean_all.unstack()
    df_mean_all.columns = ['_'.join(c) for c in df_mean_all.columns.values]
    
    # for viepoints and side with no data the mean of all viepoints and women is taken to fill na values:
    df_mean_all = df_mean_all.fillna(df_mean_all.mean())

    df_mean_side = predictions_develop_set.groupby(['study_id', 'side']).mean()
    df_mean_side = df_mean_side.unstack()
    df_mean_side.columns = ['_'.join(c) for c in df_mean_side.columns.values]

    #create dict to fill NA
    mean_side_dict = df_mean_side.to_dict()
    
    # fill NA values in each colum in dataframe according to the mean in the mean_side_dict:
    for c in df_all.columns[1:]:
        pred_class = c.rsplit('_', 1)[0]
        viewpoint = c.rsplit('_', 1)[1]
        df_all[c] = df_all[c].fillna(df_all['study_id'].apply(lambda x: mean_side_dict.get(pred_class).get(x)))
        df_all[c] = df_all[c].fillna(df_mean_all.loc[viewpoint, pred_class])
    
    return df_all
